import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;

@RunWith(Parameterized.class)
public class CDPlayerTest {

    private final String[] songlist;
    private final int n;
    private final int expected;

    public CDPlayerTest(String[] songlist, int n, int expected) {
        this.songlist = songlist;
        this.n = n;
        this.expected = expected;
    }


    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {//{0)
        new String[] {"BBAC"},
        3,
        1},
//        The example from the problem statement. The first song cannot be the start of a permutation, since "BBA" is not a permutation of "ABC". However, if the permutation starts at song 1, then "??B" and "BAC" are both valid.
        {//{1)
        new String[] {"BACAB", "BCA"},
        3,
        2},
//        Index 0 is illegal because the second set of songs "ABB" is illegal. Similarly, index 1 can't be a legal start ("BBC" is illegal). Index 2 works though, since "?BA", "CAB", "BCA" could be generated by the algorithm.
        {//{2)
        new String[] {"AAACBACBACBACBACBACBACB"},
        3,
        -1},
//        Even though all of the songs starting at index 2 work, the "?AA" that would have preceded it could not have been generated; thus, the CD player is broken.
        {//{3)
        new String[] {"ABCDEABDECBAECDEDACB"},
        5,
        0},
        {//{4)
        new String[] {"ABCABCABCABCABCABCABC", "ABCABCABCABCABCABCABC"},
        22,
        -1},
        {//{5)
        new String[] {"AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA"},
        1,
        0},
        {//{6)
        new String[] {"ADEF"},
        12,
        0},
        });
    }

    @Test
    public void test() throws Exception {
        assertThat(CDPlayer.isRandom(songlist, n), is(expected));
    }
}